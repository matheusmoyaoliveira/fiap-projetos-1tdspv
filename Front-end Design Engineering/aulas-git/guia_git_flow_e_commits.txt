
==============================
GUIA DE GIT FLOW E PADRÃ•ES DE COMMIT
==============================

âœ… PADRÃ•ES DE COMMIT (baseado no repositÃ³rio iuricode/padroes-de-commits):

- feat: Nova funcionalidade
- fix: CorreÃ§Ã£o de bug
- docs: DocumentaÃ§Ã£o (README, comentÃ¡rios)
- test: Testes unitÃ¡rios ou de integraÃ§Ã£o
- build: MudanÃ§as em scripts de build ou dependÃªncias
- perf: Melhorias de desempenho
- style: Estilo de cÃ³digo (formataÃ§Ã£o, lint)
- refactor: RefatoraÃ§Ã£o sem alterar comportamento
- chore: Tarefas de manutenÃ§Ã£o geral
- ci: ConfiguraÃ§Ã£o de CI/CD
- raw: AlteraÃ§Ãµes em dados/brutos
- cleanup: Limpeza de cÃ³digo comentado

Principais para uso diÃ¡rio: feat, fix, docs, test, style, refactor, chore, ci

==============================

âœ… PREFIXOS DE BRANCHES (Git Flow):

- feature/ â†’ novas funcionalidades (ex: feature/login-system)
- bugfix/ â†’ correÃ§Ãµes baseadas em release ou develop (ex: bugfix/corrigir-login)
- hotfix/ â†’ correÃ§Ãµes imediatas crÃ­ticas na main (ex: hotfix/erro02-correcao-banco)
- release/ â†’ preparaÃ§Ã£o para versÃ£o de release (ex: release/v1.0)
- develop â†’ branch principal de desenvolvimento integrado
- main â†’ branch da versÃ£o de produÃ§Ã£o estÃ¡vel

DICA: Use letras minÃºsculas, separaÃ§Ã£o por hÃ­fen (-), sem espaÃ§os

==============================

ğŸ’¡ FLUXO RECOMENDADO DE GIT FLOW:

1. Comece no branch 'develop'
2. Crie um branch feature/nome-do-recurso
3. FaÃ§a commits com prefixos corretos â€” ex: feat: criar classe Conta
4. DÃª merge da feature para develop (via pull request)
5. Crie branch release/v1.0 quando estiver pronto pra subir
6. ApÃ³s testes, dÃª merge de release/v1.0 para main e develop
7. Marque a tag/release v1.0 na branch main
8. Se encontrar bug crÃ­tico, crie hotfix/descricao e dÃª merge em main e develop

==============================

ğŸ’¾ Use esse guia em todos os projetos para manter organizaÃ§Ã£o e padrÃ£o profissional.
